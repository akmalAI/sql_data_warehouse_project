Create or alter PROCEDURE  silver.load_silver as 
Begin 
	 Declare @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME
	BEGIN TRY
		set @batch_start_time = getdate()
		PRINT '=====>> Truncating Table: silver.crm_cust_info <<======'
		set @start_time = getdate()
		TRUNCATE TABLE silver.crm_cust_info
		PRINT '=====>> Inserting Data Into: silver.crm_cust_info <<======'
		insert into silver.crm_cust_info(
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_marital_status,
		cst_gndr,
		cst_create_date
		)
		select 
		cst_id,
		cst_key,
		TRIM(cst_firstname) as cst_firstname,
		TRIM(cst_lastname) as cst_lastname,
		case 
			when UPPER(TRIM(cst_marital_status)) = 'M' then 'Married'
			when UPPER(TRIM(cst_marital_status)) = 'S' then 'Single'
			else 'n/a'
		end cst_marital_status,
		case
			when UPPER(TRIM(cst_gndr)) = 'M' then 'Male'
			when UPPER(TRIM(cst_gndr)) = 'F' then 'Female'
			else 'n/a'
		end cst_gndr,
		cst_create_date
		from(
		select * , 
		ROW_NUMBER() over (partition by cst_id order by cst_create_date desc) as latest_flag
		from bronze.crm_cust_info where cst_id is not null) t
		where latest_flag = 1;
		set @end_time = getdate()
		print 'Load Duration: ' + cast(datediff(second,@start_time,@end_time) as nvarchar) + 'seconds'


		PRINT '=====>> Truncating Table: silver.crm_prd_info <<======'
		set @start_time = getdate()
		TRUNCATE TABLE silver.crm_prd_info
		PRINT '=====>> Inserting Data Into: silver.crm_prd_info <<======'

		insert into silver.crm_prd_info(
		prd_id,
		category_id ,
		prd_key ,
		prd_nm ,
		prd_cost,
		prd_line ,
		prd_start_dt ,
		prd_end_dt
		)

		select 
		prd_id,
		REPLACE(SUBSTRING(prd_key,1,5) ,'-','_') as category_id,
		SUBSTRING(prd_key,7,LEN(prd_key)) as prd_key,
		prd_nm,
		ISNULL(prd_cost,0) as prd_cost,
		case UPPER(TRIM(prd_line))
			when 'R' then 'Road'
			when 'M' then 'Mountain'
			when 'S' then 'Other Sales'
			when 'T' then 'Touring'
			else 'n/a'
		end prd_line,
		cast(prd_start_dt AS DATE) as prd_start_dt,
		cast(LEAD(prd_start_dt) over (partition by prd_key order by prd_start_dt ) - 1  as DATE) as prd_end_dt 
		from bronze.crm_prd_info
		set @end_time = getdate()
		print 'Load Duration: ' + cast(datediff(second,@start_time,@end_time) as nvarchar) + 'seconds'

		PRINT '=====>> Truncating Table: silver.crm_sales_details <<======'
		set @start_time = getdate()
		TRUNCATE TABLE silver.crm_sales_details
		PRINT '=====>> Inserting Data Into: silver.crm_sales_details <<======'

		insert into silver.crm_sales_details(
		sls_ord_num	,
		sls_prd_key ,
		sls_cust_id ,
		sls_order_dt ,
		sls_ship_dt ,
		sls_due_dt ,
		sls_sales ,
		sls_quantity ,
		sls_price 
		) 

		select 
		sls_ord_num	,
		sls_prd_key ,
		sls_cust_id ,
		case
			when sls_order_dt = 0 or len(sls_order_dt) != 8 then NULL
			else cast(cast(sls_order_dt as varchar) as date)
		end as sls_order_dt,
		case 
			when sls_ship_dt = 0 or len(sls_ship_dt) != 8 then NULL
			else cast(cast(sls_ship_dt as varchar) as date)
		end as sls_ship_dt ,
		case 
			when sls_due_dt = 0 or len(sls_due_dt) != 8 then NULL
			else cast(cast(sls_due_dt as varchar) as date)
		end as sls_due_dt ,
		case
			when sls_sales is null or sls_sales <= 0 or sls_sales != sls_quantity * ABS(sls_price) then sls_quantity* ABS(sls_price)
			else sls_sales
		end as sls_sales,
		sls_quantity ,
		case
			when sls_price is null or sls_price <= 0 then sls_sales / NULLIF(sls_quantity,0)
			else sls_price
		end as sls_price 
		from bronze.crm_sales_details
		set @end_time = getdate()
		print 'Load Duration: ' + cast(datediff(second,@start_time,@end_time) as nvarchar) + 'seconds'

		PRINT '=====>> Truncating Table: silver.erp_cust_az12 <<======'
		set @start_time = getdate()
		TRUNCATE TABLE silver.erp_cust_az12
		PRINT '=====>> Inserting Data Into: silver.erp_cust_az12 <<======'

		insert into silver.erp_cust_az12(cid,bdate,gen)
		select
		case 
			when cid like 'NAS%' then SUBSTRING(cid,4,LEN(cid))
			else cid
		end as cid,
		case 
			when bdate > getdate() then NULL
			else bdate
		end as bdate,
		case 
			when UPPER(TRIM(gen)) in ('F','Female') then 'Female'
			when UPPER(TRIM(gen)) in ('M','Male') then 'Male'
			else 'n/a'
		end as gen
		from bronze.erp_cust_az12;
		set @end_time = getdate()
		print 'Load Duration: ' + cast(datediff(second,@start_time,@end_time) as nvarchar) + 'seconds'

		PRINT '=====>> Truncating Table: silver.erp_loc_a101 <<======'
		set @start_time = getdate()
		TRUNCATE TABLE silver.erp_loc_a101
		PRINT '=====>> Inserting Data Into: silver.erp_loc_a101 <<======'

		insert into silver.erp_loc_a101(cid,cntry)

		select 
		REPLACE(cid,'-','') as cid,
		case
			when TRIM(cntry) = 'DE' then 'Germany'
			when TRIM(cntry) in ('US','USA') then 'United States'
			when TRIM(cntry) = '' or cntry is NULL then 'n/a'
			else TRIM(cntry)
		end as cntry
		from bronze.erp_loc_a101;
		set @end_time = getdate()
		print 'Load Duration: ' + cast(datediff(second,@start_time,@end_time) as nvarchar) + 'seconds'

		PRINT '=====>> Truncating Table: silver.erp_px_cat_g1v2 <<======'
		set @start_time = getdate()
		TRUNCATE TABLE silver.erp_px_cat_g1v2
		PRINT '=====>> Inserting Data Into: silver.erp_px_cat_g1v2 <<======'

		insert into silver.erp_px_cat_g1v2(
		id,cat,subcat,maintenance
		)
		select
		id,
		cat,
		subcat,
		maintenance
		from bronze.erp_px_cat_g1v2
		set @end_time = getdate()
		print 'Load Duration: ' + cast(datediff(second,@start_time,@end_time) as nvarchar) + 'seconds'

		set @batch_end_time = getdate()
		print 'Batch Load Duration : ' + cast(datediff(second,@batch_start_time,@batch_end_time) as nvarchar) + 'seconds';
	END TRY
	BEGIN CATCH
		 print '========================';
		 print 'Error occured for data loading in silver layer';
		 print 'Error occured ' +  error_message();
		 print 'Error occured ' + cast(error_number() as nvarchar);
		 print 'Error occured ' + cast(error_state() as nvarchar);
		 print '========================';
	END CATCH
END 
